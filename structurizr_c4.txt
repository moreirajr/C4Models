// documentacao:
// https://docs.structurizr.com/dsl/language
// Visualização: https://structurizr.com/dsl

workspace {

    model {
        
        // Define atores
        funcionario = person "Funcionário Comum" "Trabalhador que identifica um possível risco de acidente"
        medico = person "Médico" "Médico que atendeu um funcionário que sofreu um acidente de trabalho"
        tecnico = person "Técnico de Segurança" "Funcionário responsável pelas medidas de segurança da empresa"
        
        // define o sistema de registro de acidentes de trabalho
        sistema = softwareSystem "Sistema de Registro de Acidentes de Trabalho" {
            description "Permite usuários notificarem acidentes de trabalho e possíveis riscos de acidente"
            
            // define a camada de frontend
            frontendApp = container "[Frontend] Web Application" {
                description "Interface do usuário"
                technology "ReactJS"
                
                // Define interacoes
                funcionario -> this "Cadastra eventos"
                medico -> this "Cadastra laudos"
                tecnico -> this "Cadastra ocorrências e Valida laudos"
            }
            
            // define a camada de api
            backendApp = container "[API] Web Application" {
                description "Fornece serviços para registraro e visualização de ocorrencia e eventos envolvendo acidentes de trabalho."
                technology ".Net Core API"

                // Adiciona controllers
                ocorrenciasController = component "OcorrenciasController" {
                    description "Permite usuário cadastrar, alterar e visualizar ocorrências"
                    technology ".NET REST API Controller"
                }
                
                laudosController = component "LaudosController" {
                    description "Permite usuário cadastrar, alterar e visualizar laudos"
                    technology ".NET REST API Controller"
                }
                
                eventoController = component "EventoController" {
                    description "Permite usuário cadastrar, alterar e visualizar eventos"
                    technology ".NET REST API Controller"
                }
                
                // Adiciona os componentes
                ocorrenciasComponent = component "Componente de Ocorrências" {
                    description "Componente responsável por gerenciar Ocorrências"
                    technology ".Net"
                }
                
                laudosComponent = component "Componente de Laudos" {
                    description "Componente responsável por gerenciar Laudos"
                    technology ".Net"
                }
                
                eventoComponent = component "Componente de Eventos" {
                    description "Componente responsável por gerenciar Eventos"
                    technology ".Net"
                }
                
                documentosComponent = component "Componente de Documentos" {
                    description "Gerencia upload e armazenamento de documentos relacioandos aos acidentes"
                    technology ".Net"
                }
                
                notificacoesComponent = component "Componente de Notificações" {
                    description "Envia notificações de acidente"
                    technology ".Net"
                }
                
                // adicionar Repositories
                laudosRepository = component "Laudos Repository" {
                    description "Classe Repository para o domínio de Laudos"
                    technology ".Net - Repository Pattern"
                }
                
                eventoRepository = component "Eventos Repository" {
                    description "Classe Repository para o domínio de Eventos"
                    technology ".Net - Repository Pattern"
                }
                
                ocorrenciasRepository = component "Ocorrências Repository" {
                    description "Classe Repository para o domínio de Ocorrências"
                    technology ".Net  - Repository Pattern"
                }
                
                ocorrenciasController -> ocorrenciasComponent "Usa"
                ocorrenciasController -> notificacoesComponent "Usa"
                ocorrenciasController -> documentosComponent "Usa"
                laudosController -> laudosComponent "Usa"
                laudosController -> documentosComponent "Usa"
                eventoController -> documentosComponent "Usa"
                eventoController -> eventoComponent "Usa"
                
                ocorrenciasComponent -> ocorrenciasRepository "Usa"
                eventoComponent -> eventoRepository "Usa"
                laudosComponent -> laudosRepository "Usa"
            }
            
            database = container "Database" {
                description "Banco de dados relacional"
                technology "PostgreSQL"

                backendApp -> this "Lê e escreve no [EF core]"
                ocorrenciasRepository -> this "Lê e escreve no [EF core]"
                laudosRepository -> this "Lê e escreve no [EF core]"
                eventoRepository -> this "Lê e escreve no [EF core]"
            }
            
            aws_s3 = container "AWS S3" {
                description "Armazenamento de Documentos/Imagens"
                
                documentosComponent -> this "Upload/Download de documentos"
            }
        }
        
        // define o sistema externo
        softwareExterno = softwareSystem "eSocial" {
            description "CAT — Comunicação de Acidente de Trabalho"
        }
        
        sistema -> softwareExterno "Integração [XML/HTTPS]"
        backendApp -> softwareExterno "Integração [XML/HTTPS]"
        
        frontendApp -> backendApp "Consome API [JSON/HTTPS]"
        frontendApp -> ocorrenciasController "Consome API [JSON/HTTPS]"
        frontendApp -> laudosController "Consome API [JSON/HTTPS]"
        frontendApp -> eventoController "Consome API [JSON/HTTPS]"
        
        notificacoesComponent -> softwareExterno "Integração [XML/HTTPS]"
    }

    // define os diagramas do workspace
    views {
        
        // level context
        systemContext sistema {
            include *
            autolayout lr
        }
        
        // level container
        container sistema {
            include *
            autolayout lr
        }
        
        // level component
        component backendApp {
            include *
            autolayout lr
        }

        theme default
    }

}
